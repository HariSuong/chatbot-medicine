// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================
// ENUMS
// =============================================================

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_VERIFICATION // Thêm mới: Trạng thái chờ xác thực
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum NotificationType {
  EMAIL
  SMS
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

// =============================================================
// MODELS
// =============================================================

// Bảng Người dùng
model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  name            String?
  phoneNumber     String?
  avatarUrl       String?
  status          UserStatus     @default(PENDING_VERIFICATION) // Cập nhật: Mặc định là chờ xác thực

  roleId          String
  role            Role           @relation(fields: [roleId], references: [id])

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Quan hệ
  consultantProfile Consultant?    // Thêm mới: Một User có thể là một Consultant
  conversations     Conversation[]
  devices           Device[]
  refreshTokens     RefreshToken[]
  appointments      Appointment[]
  notifications     Notification[]
}

// Bảng Vai trò
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

// Thêm mới: Bảng Chuyên gia tư vấn (Bác sĩ/Thú y)
model Consultant {
  id          String        @id @default(uuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  specialty   String?       // Chuyên khoa (ví dụ: "Da liễu", "Thú y tổng quát")
  bio         String?       @db.Text
  isAvailable Boolean       @default(true)

  appointments Appointment[]
}

// Bảng Thiết bị
model Device {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent    String?
  ipAddress    String?
  lastActiveAt DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  isActive     Boolean        @default(true)
  refreshTokens RefreshToken[]
}

// Bảng Refresh Token
model RefreshToken {
  id                String     @id @default(uuid())
  token             String     @unique
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId          String?
  device            Device?    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  expiresAt         DateTime
  createdAt         DateTime   @default(now())
  revokedAt         DateTime?
  replacedByTokenId String?
}

// Bảng Mã xác thực
model VerificationCode {
  id        String               @id @default(uuid())
  email     String
  code      String
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())
  @@unique([email, type]) // Mỗi loại chỉ có 1 code cho 1 email
  @@index([expiresAt])
}

// Thêm mới: Bảng Tài liệu nguồn cho Knowledge Base
model Document {
  id        String   @id @default(uuid())
  fileName  String
  sourceUrl String?
  category  String   // "veterinary", "dermatology"
  createdAt DateTime @default(now())
  chunks    KnowledgeChunk[]
}

// Bảng Kiến thức (đã cập nhật)
model KnowledgeChunk {
  id         String                  @id @default(uuid())
  documentId String
  document   Document                @relation(fields: [documentId], references: [id], onDelete: Cascade) // Cập nhật: Thêm onDelete
  content    String
  embedding  Unsupported("vector(768)")
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

// Bảng Cuộc trò chuyện
model Conversation {
  id                       String    @id @default(uuid())
  userId                   String
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                    String?
  platform                 String?
  platformConversationId   String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  messages                 Message[]
}

// Bảng Tin nhắn
model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade) // Cập nhật: Thêm onDelete
  role           String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
}

// Bảng Lịch hẹn (đã cập nhật)
model Appointment {
  id                  String            @id @default(uuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  consultantId        String
  consultant          Consultant        @relation(fields: [consultantId], references: [id]) // Cập nhật: Liên kết với model Consultant
  appointmentDateTime DateTime
  status              AppointmentStatus @default(PENDING)
  notes               String?           @db.Text
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  notifications       Notification[]
}

// Bảng Thông báo
model Notification {
  id            String             @id @default(uuid())
  userId        String?
  user          User?              @relation(fields: [userId], references: [id])
  type          NotificationType
  subject       String?
  body          String             @db.Text
  recipient     String?
  status        NotificationStatus @default(PENDING)
  appointmentId String?
  appointment   Appointment?       @relation(fields: [appointmentId], references: [id], onDelete: SetNull) // Cập nhật: Nếu Appointment bị xóa thì chỉ set null ở đây
  createdAt     DateTime           @default(now())
  sentAt        DateTime?
}